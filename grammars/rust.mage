# A Mage grammar for the Rust Programming Language 
#
# Grammar derived from the structures defined in the `syn` crate.
# See [its documentation][1] for more information.
#
# [1]: https://docs.rs/syn/2.0.85/syn/index.html

# Should be part of standard library

any_byte = [\x00-\xFF]

any_char = [\x00-\x7F]

eof = !any_byte

# Helper utilities

eol = '\r\n' | '\n'

eolf = eol | eof

triple_slash_comment
  = '///' (!eolf any_char)*

line_comment
  = '//' (!eolf any_char)*

block_comment
  = '/*' (!'*/' any_char)* '*/'

@skip
__ = ([\n\r\t ] | line_comment)*

# Tokens

@keyword
pub token ident
  = [a-zA-Z_] [a-zA-Z_0-9]*

pub token integer -> Integer
  = '0b' [0-1]+
  | '0b' [0-8]+
  | '0x' [0-9a-f]i+
  | [0-9]*

pub token float -> Float
   = [0-9]* '.' [0-9]+

character = any_char

pub token string
   = '"' character* '"'

pub token char
  = '\'' character '\''

# Shared definitions

pub public
  = 'pub' restrict:( '(' 'in'? path ')' )?

pub type_init
  = '=' type_expr

pub type_param
  = name:ident ':' bounds:(type_param_bound '%' '+') default:type_init?

pub const_param
  = 'const' name:ident ':' type_expr default:init?

pub generic_param
  = lifetime
  | type_param
  | const_param

pub trait_bound_modifier
  = '?'

pub bound_lifetimes
  = 'for' '<' lifetimes:(generic_param % ',') '>'

pub trait_bound
  = modifier:trait_bound_modifier? bound_lifetimes? path

pub type_param_bound
  = trait_bound
  | lifetime

pub lifetime
  = '\'' name:ident

pub assoc_type
  = name:ident generics:angle_bracketed_generic_arguments? '=' type_expr

pub assoc_const
  = name:ident generics:angle_bracketed_generic_arguments? '=' expr

pub constraint
  = name:ident generics:angle_bracketed_generic_arguments ':' bounds:(type_param_bound % '+')

pub generic_argument
  = lifetime
  | type_expr
  | expr
  | assoc_type
  | assoc_const
  | constraint

pub turbofish
  = leading_colon_colon:'::' '<' args:(generic_argument % ',') '>'

pub angle_bracketed_generic_arguments
  = '<' args:(generic_argument % ',') '>'

pub parenthesized_generic_arguments
  = '(' params:(type_expr % ',') ')' '->' result:type_expr

pub path_arguments
  = turbofish
  | angle_bracketed_generic_arguments
  | parenthesized_generic_arguments

pub path_segment
  = name:ident args:path_arguments?

pub path
  = leading_colon_colon:'::'? segments:(path_segment %% '::')

block
  = '{' stmts:(item ';') last:expr '}'

# Type expressions

pub qself
  = '<' type_expr 'as' path '>'

pub path_type_expr
  = qself? path

pub array_type_expr
  = '[' type_expr ';' expr ']'

pub never_type_expr
  = '!'

pub tuple_type_expr
  = '(' elements:(type_expr % ',') ')'

pub type_expr
  = path_type_expr
  | array_type_expr
  | never_type_expr
  | tuple_type_expr

# Patterns

pub named_pattern
  = attr* 'ref'? 'mut'? name:ident sub:('@' pattern)?

pub pattern
  = named_pattern

# Expressions

pub path_expr
  = attr* qself? path

bool = 'true' | 'false'

@wrap
pub lit_expr
  = literal:(string | char | float | bool)

pub init
  = name:ident '=' value:expr

pub struct_expr
  = path '{' (init % ',') ','? '}'

pub call_expr
  = operator:expr '(' args:(expr % ',') ')'

pub ret_expr
  = 'return' expr

pub block_expr
  = block

pub expr
  = lit_expr
  | path_expr
  | call_expr
  | struct_expr
  | block_expr
  | ret_expr

# Items

pub abi
  = 'extern' name:string

pub variadic_arg
  = attr* pattern '...'? ','?

pub self_arg
  = attr* reference:('&' lifetime)? 'mut'? 'self' ':' type_expr

pub typed_arg
  = attr* pattern ':' type_expr

pub arg
  = self_arg
  | typed_arg
  | variadic_arg

pub lifetime_predicate
  = lifetime ':' bounds:(lifetime %% '+')

pub type_predicate
  = bound_lifetimes type_expr ':' bounds:(type_param_bound %% '+')

pub where_predicate
  = lifetime_predicate
  | type_predicate

pub generics
  = params:('<' (generic_param % ',') '>')? where_clause:('where' (where_predicate %% ','))?

pub signature
  = 'const'? 'async'? 'unsafe'? abi? 'fn' name:ident generics '(' inputs:(arg % ',') ')' output:('->' type_expr)?

pub field
  = name:ident ':' type_expr

pub variant
  = struct_variant
  | tuple_variant
  | empty_variant

pub struct_variant
  = name:ident '{' fields:(field % ',') ','? '}'

pub tuple_variant
  = name:ident '(' types:(type_expr % ',') ')'

pub empty_variant
  = name:ident init?

pub enum_item
  = attr* visibility:public? 'enum' name:ident '{' variants:(variant % ',') ','? '}'

pub meta_path
  = path

pub meta_braced
  = path '{' token* '}'

pub meta_parenthesized
  = path '(' token* ')'

pub meta_bracketed
  = path '[' token* ']'

pub meta_name_value
  = path '=' expr

pub meta
  = meta_path
  | meta_parenthesized
  | meta_bracketed
  | meta_braced
  | meta_name_value

pub attr
  = '#' '!'? '[' meta ']'

pub struct_item
  = attr* visibility:public? 'struct' name:ident '{' fields:(field % ',') ','? '}'

pub expr_item
  = expr

pub use_path
  = name:ident '::' tree:use_tree

pub use_name
  = name:ident

pub use_rename
  = name:ident 'as' rename:ident

pub use_glob
  = '*'

pub use_group
  = '{' items:(use_tree % ',') '}'

pub use_tree
  = use_path
  | use_rename
  | use_name
  | use_glob
  | use_group

pub use_item
  = attr* visibility:public? 'use' '::'? path:(ident '::')* ';'

pub fn_impl_element
  = attr* visibility:public? 'default'? signature block

pub impl_element
  = fn_impl_element

pub impl_item
  = attr* 'default'? 'unsafe'? 'impl' generics trait:('!'? path 'for')? type_expr '{' impl_element* '}'

pub item
  = enum_item
  | struct_item
  | use_item
  | expr_item

pub toplevel
  = enum_item
  | struct_item
  | use_item
  | impl_item

pub source_file
  = items:toplevel*

