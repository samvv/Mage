# Should be part of standard library

any_byte = [\x00-\xFF]

any_char = [\x00-\x7F]

eof = !any_byte

extern token indent
extern token dedent

# Helper utilities

eol = '\r\n' | '\n'

eolf = eol | eof

line_comment
  = '#' (!eolf any_char)*

eos
  = __ ';'
  | _ line_comment? eol
  | __ eof

@skip
__ = ([\n\r\t ] | line_comment)*

_ = [\t ]*

# First tokens

@keyword
pub token ident
  = [a-zA-Z_] [a-zA-Z_0-9]*

# A floating-point number.
#
# ```
# 13.33
# ```
pub token float -> Float
   = [0-9]* '.' [0-9]+

# An integral number.
#
# ```
# 1
# ```
#
# ```
# 2
# ```
#
# ```
# 3
# ```
#
# ```
# 9876
# ```
pub token integer -> Integer
   = [1-9] [0-9]*
   | '0'+

char = any_char

pub token string
   = '"' char* '"'
   | '\'' char* '\''

# General syntax

pub slice
   = lower:expr? ':' upper:expr? step:(':' expr)?

# Patterns

pub pattern
  = named_pattern
  | attr_pattern
  | subscript_pattern
  | starred_pattern
  | list_pattern
  | tuple_pattern

pub named_pattern
  = name:ident

pub attr_pattern
  = pattern '.' name:ident

pub subscript_pattern
  = pattern '[' slices:((pattern | slice) %% ',') ']'

pub starred_pattern
  = '*' expr

pub list_pattern
  = '[' elements:(pattern % ',') ']'

pub tuple_pattern
  = '(' elements:(pattern % ',') ')'

# Expressions

pub expr
  = attr_expr
  | call_expr
  | const_expr
  | ellipsis_expr
  | generator_expr
  | infix_expr
  | list_expr
  | named_expr
  | nest_expr
  | prefix_expr
  | starred_expr
  | subscript_expr
  | tuple_expr

pub ellipsis_expr
  = '...'

pub guard
  = 'if' expr

pub comprehension
  = 'async'? 'for' pattern 'in' target:expr guards:guard*

pub generator_expr
  = element:expr generators:comprehension+

@wrap
pub const_expr
   = literal:(string | float | integer)

pub nest_expr
  = '(' expr ')'

pub named_expr
  = name:ident

pub attr_expr
  = expr '.' name:ident

pub subscript_expr
  = expr '[' slices:((expr | slice) %% ',') ']'

pub starred_expr
  = '*' expr

pub list_expr
  = '[' elements:(expr % ',') ']'

pub tuple_expr
  = '(' elements:(expr % ',') ')'

pub arg
  = keyword_arg
  | expr

pub keyword_arg
  = name:ident '=' expr

pub call_expr
  = operator:expr '(' args:(arg % ',')  ')'

pub prefix_op
  = 'not'
  | '+'
  | '-'
  | '~'

pub prefix_expr
  = prefix_op expr

pub infix_op
  = '+'
  | '-'
  | '*'
  | '/'
  | '//'
  | '%'
  | '<<'
  | '>>'
  | '|'
  | '^'
  | '&'
  | '@'
  | 'or'
  | 'and'
  | '=='
  | '!='
  | '<'
  | '<='
  | '>'
  | '>='
  | 'is'
  | 'is' 'not'
  | 'in'
  | 'not' 'in'

pub infix_expr
  = left:expr op:infix_op right:expr

# Statements

pub qual_name
  = modules:(ident '.')* name:ident

pub absolute_path
  = name:qual_name

pub relative_path
  = '.'+ name:qual_name?

pub path
  = absolute_path
  | relative_path

pub alias
  = path asname:('as' ident)?

pub from_alias
  = name:(ident | '*') asname:('as' ident)?

pub import_stmt
  = 'import' aliases:(alias %% ',')

pub import_from_stmt
  = 'from' path 'import' aliases:(from_alias %% ',')

pub stmt
  = assign_stmt
  | break_stmt
  | class_def
  | continue_stmt
  | delete_stmt
  | expr_stmt
  | for_stmt
  | func_def
  | global_stmt
  | if_stmt
  | import_stmt
  | import_from_stmt
  | nonlocal_stmt
  | pass_stmt
  | raise_stmt
  | ret_stmt
  | try_stmt
  | type_alias_stmt
  | while_stmt

pub ret_stmt
  = 'return' expr?

pub expr_stmt
  = expr

pub assign_stmt
  = pattern annotation:(':' expr)? value:('=' expr)?

pub pass_stmt
  = 'pass'

pub global_stmt
  = 'global' names:(ident %% ',')

pub nonlocal_stmt
  = 'nonlocal' names:(ident %% ',')

@noskip
body
  = stmt | \indent body:(stmt \eos)+ \dedent

pub if_case
   = 'if' test:expr ':' body

pub elif_case
   = 'elif' test:expr ':' body

pub else_case
   = 'else' ':' body

pub if_stmt
  = first:if_case alternatives:elif_case* last:else_case?

pub delete_stmt
  = 'del' pattern

pub raise_stmt
  = 'raise' expr cause:('from' expr)?

pub for_stmt
  = 'for' pattern 'in' expr ':' body else_clause:('else' ':' body)?

# TODO expr should be test:expr
pub while_stmt
  = 'while' expr ':' body else_clause:('else' ':' body)?

pub break_stmt
  = 'break'

pub continue_stmt
  = 'continue'

pub type_alias_stmt
  = 'type' name:ident type_params:('[' (expr % ',') ']')? '=' expr

pub except_handler
  = 'except' expr binder:('as' ident)? ':' body

pub try_stmt
  = 'try' ':' body handlers:except_handler* else_clause:('else' ':' body)? finally_clause:('finally' ':' body)?

# TODO add keyworded bases
pub class_def
  = decorator* 'class' name:ident bases:('(' (ident % ',') ')')? ':' body

pub param
  = rest_pos_param
  | rest_keyword_param
  | pos_sep_param
  | kw_sep_param
  | named_param

pub named_param
  = pattern annotation:(':' expr)? default:('=' expr)?

pub rest_pos_param
  = '*' name:ident

pub rest_keyword_param
  = '**' name:ident

pub pos_sep_param
  = '/'

pub kw_sep_param
  = '*'

pub decorator
  = '@' expr

pub func_def
  = decorator* 'async'? 'def' name:ident '(' params:(param % ',') ')' return_type:('->' expr)? ':' body

# Toplevel expressions

pub module
  = stmts:(stmt \eolf)*

