
# Should be part of standard library

any_byte = [\x00-\xFF]

any_char = [\x00-\x7F]

eof = !any_byte

# Whitespace and comments

eol = '\r\n' | '\n'

eolf = eol | eof

line_comment
  = '#' (!eolf any_char)*

comment
  = line_comment

@skip
__ = ([\n\r\t ] | comment)*

_ = [\t ]*

# Externally defined tokens

extern token block_start
extern token block_end
extern token linefold_end

# Tokens

@keyword
pub token ident
  = [a-z_]i [0-9a-z_]i*

pub token ident_alt
  = [A-Z_] [0-9a-z_]i*

bin_digit
  = [01]

oct_digit
  = [0-7]

hex_digit
  = [0-9a-f]i

pub token integer
  = '0b' bin_digit+
  | '0o' oct_digit+
  | '0x' hex_digit+
  | '0'
  | [1-9] [0-9]*

escapee
  = [abefnrtv\\'"]
  | 'x' hex_digit{2}
  | 'u' hex_digit{4}

char
  = '\\' escapee
  | any_char

pub token string
  = '"' char+ '"'

pub token operator
  = [+\-*/&^%$!?<>=~.]+

# Shared definitions

pub literal
  = string
  | integer

module_path
  = (ident_alt '.')*

# Patterns

pub lit_patt
  = literal

pub named_patt
  = name:ident

pub tuple_patt
  = '(' elements:(patt % ',')* ')'

pub enum_patt
  = name:type_name args:patt*

pub typed_patt
  = patt ':' type_expr

pub patt
  = lit_patt
  | named_patt
  | tuple_patt

# Expressions

pub block_element
  = type_decl
  | func_decl
  | var_decl
  | expr

pub block_expr
  = block_start items:(block_element %% linefold_end) block_end

pub call_expr
  = func:expr args:expr+

pub func_expr
  = '\\' params:patt+ '->' expr

pub infix_expr
  = expr operator expr

pub match_arm
  = patt '=>' expr

pub match_expr
  = 'match' expr block_start (match_arm % linefold_end) block_end

pub member_expr
  = expr %%% '.'

pub nest_expr
  = '(' expr ')'

pub ref_expr
  = module_path name:ident

pub ret_expr
  = 'return' expr

pub field
  = name:ident '=' expr

pub struct_expr
  = '{' fields:(field % ',') ','? '}'

pub tuple_expr
  = '(' elements:expr* ')'

pub expr
  = block_expr
  | call_expr
  | func_expr
  | infix_expr
  | match_expr
  | member_expr
  | nest_expr
  | ref_expr
  | struct_expr
  | tuple_expr

# Type expressions

type_var
  = name:ident

type_name
  = module_path name:ident_alt

pub app_type_expr
  = op:type_expr arg:type_expr

pub arrow_type_expr
  = left:type_expr '->' right:type_expr

pub ref_type_expr
  = type_name

pub var_type_expr
  = type_var

pub type_expr
  = app_type_expr
  | arrow_type_expr
  | var_type_expr
  | ref_type_expr

# Items

pub import_specifier
  = name:ident rename:('as' ident)?

pub import_decl
  = 'import' path:string specifiers:('(' (import_specifier % ',') ')')? \linefold_end

pub type_decl
  = 'type' name:ident type_var* '=' type_expr \linefold_end

pub var_decl
  = 'let' patt type_init:(':' type_expr)? init:('=' expr)? \linefold_end

pub func_decl
  = 'let' name:ident params:patt+ '=' expr \linefold_end

# modules

pub module_element
  = func_decl
  | import_decl
  | type_decl
  | var_decl

# Toplevel entry points

pub repl_command
  = ',' name:ident args:expr* \linefold_end

pub repl
  = repl_command
  | source_element

pub source_element
  = module_element

pub source_file
  = elements:source_element*

