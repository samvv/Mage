
@skip
whitespace = [\n\r\t ]+

@keyword
pub token ident
  = [a-z_]i [a-z0-9_]i*

pub token integer -> Integer
  = [0-9]+

hex_digit
  = [0-9a-f]i+

escape_sequence
  = 'u' '{' hex_digit{4} '}'
  | 'x' hex_digit{2}
  | escaped_ascii_char

escaped_ascii_char
  = 'a'
  | 'b'
  | 'f'
  | 'n'
  | 'r'
  | 't'
  | 'v'
  | '\\'
  | '\''
  | '"'

single_char
  = '\\' escape_sequence
  | ~[\]]

pub token char
  = single_char

pub token string
  = '\'' (!'\'' single_char)* '\''

pub expr
  = char_set_expr
  | choice_expr
  | list_expr
  | lit_expr
  | lookahead_expr
  | many_expr
  | negative_lookahead_expr
  | opt_expr
  | ref_expr
  | repeat_expr
  | seq_expr
  | some_expr

pub lit_expr
  = string

pub ref_expr
  = name:ident

pub char_set_expr
  = '~'? '[' elements:(char | char '-' char)* ']' 'i'?

pub seq_expr
  = elements:expr{2,}

pub choice_expr
  = elements:(expr %%% '|')

pub repeat_expr
  = expr '{' min:integer max:(',' integer?)? '}'

pub some_expr
  = expr '+'

pub many_expr
  = expr '*'

pub opt_expr
  = expr '?'

pub lookahead_expr
  = '&' expr

pub negative_lookahead_expr
  = '!' expr

pub list_expr
  = element:expr '%'+ separator:expr

# Rules

pub decorator
  = '@' name:ident

pub rule
  = decorator* 'pub'? 'extern'? 'token'? name:ident '=' expr

pub grammar
  = rule*
